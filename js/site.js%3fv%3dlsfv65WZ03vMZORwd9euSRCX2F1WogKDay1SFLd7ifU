// search autocomplete init
$(document).ready(function () {
    
    var validTags = ["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","dfn","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1 - h6","head","header","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","pre","progress","q","rb","rp","rt","rtc","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","sup","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr"];

    $("input[data-autocomplete-url]").each(function () {
        var $el = $(this);
        var data = $el.data();

        $('#autocomplete').autocomplete({
            serviceUrl: data.autocompleteUrl,
            lookupLimit: data.autocompleteLookuplimit,
            minChars: data.autocompleteMinchars,
            maxHeight: data.autocompleteMaxheight,
            deferRequestBy: data.autocompleteDeferRequestBy,
            width: data.autocompleteWidth,
            showNoSuggestionNotice: data.autocompleteShowNoSuggestionNotice,
            suggestionNotice: data.autocompleteSuggestionNotice,
            groupBy: data.autocompleteGroupBy,
            onSelect: function (suggestion) {
                window.location.href = data.autocompleteAction + '?id=' + suggestion.data;
            }
        });
    });
    
    $(document).on("click", "[data-expand]", function () {
        var target = $(this).data().expand,
            $target = tryEvalSelector.call(this, target);

        if (isJQueryObject($target)) {
            $target.slideToggle(200);
        }
    });
    
    $(document).on("click", "[data-toggle-css]", function() {
        var data = tryEval($(this).data().toggleCss);

        if ($.isArray(data) && data.length) {
            var target = data.length > 2 ? data.shift() : "",
                $target = tryEvalSelector.call(this, target);

            if (isJQueryObject($target)) {
                $target.replaceClass(data[0], data.length > 1 ? data[1] : "");
            }
        }
    });
    
    $(document).on("click", "[data-activate]", function() {
        var target = $(this).data().activate,
            $target = tryEvalSelector.call(this, target);

        if (isJQueryObject($target)) {
            $target.addClass("active").siblings().removeClass("active");
        }
    });

    $(document).on("click", "[data-activate-parent]", function () {
        var target = $(this).data().activateParent,
            $target = $(this).parents(target);

        if (isJQueryObject($target)) {
            $target.first().addClass("active").siblings().removeClass("active");
        }
    });

    $(document).on("click", "[data-activate-child]", function () {
        var target = $(this).data().activateChild,
            $target = $(this).find(target);

        if (isJQueryObject($target)) {
            $target.first().addClass("active").siblings().removeClass("active");
        }
    });

    $('#list').click(function (event) { event.preventDefault(); $('#items .item').addClass('list-group-item'); });
    $('#grid').click(function (event) { event.preventDefault(); $('#items .item').removeClass('list-group-item'); $('#items .item').addClass('grid-group-item'); });

    function tryEvalSelector(target) {    
        if (typeof target === "object" && target.tagName) {
            target = $(target);
        }
        else if (typeof target === "string" && target.length) {
            target = target[0] === "$" ? tryEval.call(this, target) : $(target);
        }
        else if (typeof this === "object" && this.tagName) {
            target = $(this)
        }
        return target;
    }

    function isJQueryObject(obj) {
        return typeof obj === "object" && (obj instanceof jQuery || 'jquery' in Object(obj));
    }
    
    function tryEval(expression) {
        try {
            return eval(expression);
        }
        catch (err) {
            console.error("Could not evaluate: " + expression);
        }
    }
})


$.on = function (eventName, callback) {
    var source = this;
    return $(document).on(eventName, function (event, data, source) {
        return callback.call(source || document, event, data);
    });
}

$.one = function (eventName, callback) {
    var source = this;
    return $(document).one(eventName, function (event, data) {
        return callback.call(source || document, event, data);
    });
}

$.off = function (eventName) {
    // usage $.off("grid.select")
    if (eventName) {
        $(document).off(eventName);
        return $;
    }
    
    // usage $.off().on("grid.select")
    return {
        on: function (eventName, callback) {
            return $.off(eventName).on(eventName, callback);
        }
    }
}

$.trigger = function (eventName, data) {
    var source = this;

    return $(document).trigger(eventName, data, source);
}

$.fn.filterByData = function (data) {
    if (!$.isPlainObject(data))
        return $();

    return this.filter(function () {
        var tdata = $(this).data() || {};
        for (var key in data) {
            if (tdata[key] !== data[key])
                return false;
        }
        return true;
    });
}

$.delete = function (url, data) {
    return $.ajax({ url: url, type: 'DELETE', data: data });
}

$.put = function (url, data) {
    return $.ajax({ url: url, type: 'PUT', data: data });
}

$.load = function (url, data) {
    return $(document.body).load(url, data, "append");
}

$.fn.load = function (url, data, behavior) {
    var task = $.Deferred(),
        $container = this,
        $result = $();

    $.ajax({
        url: url,
        data: $.extend({}, data, { ts: +new Date }), // cache buster
        dataType: "html",       
        success: function (result) {
            if (behavior === "replace") {
                $container.before(result);
                $result = $container.prev();
                $container.remove();
                $container = $result.parent();
            }
            else if (behavior === "append") {
                $container.append(result);
                $result = $container.children(":last");
            }
            else if (behavior === "prepend") {
                $container.prepend(result);
                $result = $container.children(":first");
            }
            else {
                $container.html(result);
                $result = $container.children(":first");
            }

            $.trigger.call($container[0], "dom.change", { container: $container[0], result: $result[0] });

            task.resolve($result);
        },
        error: task.reject
    });

    return task.promise();
};

$.fn.loadComponent = function (settings) {
    if (typeof settings !== "object" || !settings.type)
        throw new Error("Component settings should be { type: <string>, id: <string>, params: <object> }");

    settings.id = settings.id || settings.type;

    return $("<component></component>").appendTo(this.empty())
        .attr("id", settings.id + "_component")
        .data({ component: settings })
        .load("/sys/components/" + settings.type + "/" + settings.id, settings.params)
        .done(function () {
            $.trigger(settings.id + ".load", settings);
        });
}

$.fn.component = function () {
    var $component = this.parents("component:first");

    if (!$component.length) {
        $.trigger("component.error", this.attr("id"));
        return;
    }

    var data = $component.data().component,
        url = "/sys/components/" + data.type + "/" + data.id;

    function onload() {
        $.trigger(data.id + ".load", data, $component[0], this);
    }

    var methods = {
        invoke: function (params) {
            data.params = params;
            return $component.load(url, params).done(onload);
        },
        reload: function () {
            return $component.load(url, $.extend({}, data.params)).done(onload);
        }
    }

    return $.extend({}, methods, data);
}

$.component = function (id) {
    return $("#" + id.replace("#", '')).component();
}

$.fn.tabs = function () {
    var $tabs = $(this);

    function _findTab(name) {
        return +name === name
            ? $tabs.find('li:eq(' + name + ') a')
            : $tabs.find('a[href="#' + name + '"]');
    }

    function _disable(name) {
        _findTab(name).attr("disabled", "disabled").parent().removeClass("active").addClass("disabled");
    }

    function _enable(name) {
        _findTab(name).removeAttr("disabled").parent().removeClass("disabled");
    }
  
    return {       
        show: function (name) {
            _enable(name);
            _findTab(name).addClass("active").tab("show");
        },
        disable: _disable,
        enable: _enable
    }
}

$.isPromise = function (result) {
    // good enough solution for testing for jQuery promises
    return typeof result === "object" && typeof result.then === "function" && typeof result.done === "function";
}

// extended location object
$.location =  $.extend({}, location, {
    fullpath: location.href.replace(/^(?:\/\/|[^\/]+)*\//, "/")
});

// jQuery Css Extensions
// TODO: the custom toggleClass overwrites jquery default behavior. use .replaceClass instead
$.fn.replaceClass = function (class1, class2) {
    var $el = $(this);

    if ($el.hasClass(class1))
        $el.removeClass(class1).addClass(class2);
    else if ($el.hasClass(class2))
        $el.removeClass(class2).addClass(class1);
    else
        $el.addClass(class1);

    return $el;
}


$.fn.removeClassRegEx = function (regex) {
    return this.each(function () {
        var classes = $(this).attr('class');
        if (!classes || !regex) return false;

        var unmatched = [];
        classes = classes.split(' ');

        for (var i = 0; i < classes.length; i++)
            if (!classes[i].match(regex))
                unmatched.push(classes[i]);

        $(this).attr('class', unmatched.join(' '));
    });
};

// Ajax Routing
$(document).on("click", "a[data-route],button[data-route]", function (event) {
    event.preventDefault();

    var $link = $(this),
        $host = $($link.data().routeHost),
        route = $link.data().route;

    // If no host is specified inline, check to see if it's been specified
    // in a parent element (eg, a menu where all links will target the same host)
    if (!$host.length) {
        $link.parents("[data-route-host]:first").each(function () {
            $host = $($(this).data().routeHost);
            $host.addClass("route-host");
        });
    }

    // Otherwise if the link is inside a host, then navigate the parent host (eg, iframe'ish)
    if (!$host.length) {
        $host = $link.parents(".route-host:first");
    }

    // Else throw an error - can't navigate if we don't know where to place the results
    if (!$host.length) {
        return console.error("Missing route host for route " + route);
    }

    return $host.router().navigate(route);
});

$.fn.router = function () {
    var $host = $(this);

    if (!$host.is(".route-host")) {
        return console.warn("Router methods are reserved for route hosts.");
    }

    if (!$host.data().router) {
        var router = {
            history: [],
            reload: function () {
                if (this.history.length > 0) {
                    this.navigate(this.history.pop());
                }
            },
            back: function () {
                if (this.history.length > 1) {
                    this.history.pop(); // remove current route first
                    this.navigate(this.history.pop());
                }
            },
            navigate: function (route) {
                this.history.push(route);

                $host.trigger("route.request");

                return $.ajax({
                    url: route,
                    dataType: "html",
                    data: { v: +new Date }, // cache buster
                    success: function (html) {
                        $host.html(html);
                        $.trigger.call($host[0], "dom.change", { container: $host[0] });
                        $host.trigger("route.response");
                    }
                });
            }
        };

        $host.data().router = router;
    }

    return $host.data().router;
}

// RequireJs Extensions
$.fn.attachModule = function (module, data) {
   var $node = this, promise = $.Deferred();

    require([module], function (module) {
        promise.resolve(module);
    });

    return promise.then(function (module) {

        if (typeof module === "function") {
            module = module.call(window, $node);
        }

        $node.data($.extend($node.data(), data));
        $node.data().getModule = function () {
            return module;
        }

        if ($.isPlainObject(module) && typeof module.attach === "function") {
            module.attach($node, data);
        }
     
        return {
            $node: $node,
            module: module,
            data: data
        };
    });
}

$.fn.attachChildModules = function () {
    var $container = this;   
    var promises = [];

    var $modules = $container.find("[data-module]").not("a");
    
    $modules.each(function () {
        var $node = $(this), data = $node.data();

        if (!data.getModule) {
            data.getModule = {}; // temp object
            promises.push(
                $node.attachModule(data.module, data)
            );
        }
    });

    $.when.apply($, promises).done(function () {
        for (var i in arguments) {
            var o = arguments[i];
            if (o && $.isPlainObject(o.module) && typeof o.module.ready === "function") {
                o.module.ready(o.$node, o.data);
            }
        };
    });
}

$(document).ready(function () {
    $(document.body).attachChildModules();
});

$.on("dom.change", function (event, data) {
    $(this).attachChildModules();
});

// Non-requirejs way to load the console from menus, etc
$.console = function (component, route) {
    var dialogUrl = "/sys/console/dialog";

    if(component)  
        dialogUrl += "/" + component;

    if(route) 
        dialogUrl += "?route=" + window.encodeURIComponent(route);

    if ($(document.body).hasClass("csc-design-mode"))
        designer.hideDesignBar();

    return $.dialog(dialogUrl);
}


// cookies
$.getCookie = function(name) {
    var matches = document.cookie.match(new RegExp(
        "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
    ));

    return matches ? decodeURIComponent(matches[1]) : undefined;
}

$.setCookie = function(name, value, options) {
    var cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);

    options = $.extend({ path: '/' }, options);
    for (var key in options) {
        cookie += "; " + key + (options[key] !== true ? "=" + options[key] : "");
    }

    document.cookie = cookie;
}

$.deleteCookie = function(name) {
    $.setCookie(name, "", { 'max-age': -1 });
}


// HTML templates
// usage: $.bind("template", {object});
$.bind = function (template, data) {
    var carets = template.match(/\$\{[\w\.\$\-]+\}/g);

    for (var i = 0; carets && i < carets.length; i++) {
        var expr = carets[i].slice(2, -1).split("."), val = data;

        try {
            for (var key in expr) {
                val = val[expr[key]];
            }
            if (val === null || val === undefined) {
                val = "";
            }
        }
        catch (err) {
            val = "!ref#error!";
        };

        template = template.replace(carets[i], val);
    }

    return template;
}


$(document).ready(function () {

    $("[id^='editor_']").on("drop", function (event) {
        event.preventDefault();
        event.stopPropagation();
        return false;
    });

    $(".cs-editor-wrapper").on("drop", function (event) {
        event.preventDefault();
        event.stopPropagation();
        return false;
    });

    initStickyMenus();
    setContentNodeSizeClass()

    function initStickyMenus() {
        var templateMenuOffset = "";
        var widgetMenuOffset = "";
        var alignmentClass = "";
        var $alignmentElement = "";
        var templateMenuIsSticky = $('.cs-header-navbar .cs-nav-sticky');
        var $templateMenu = $('.cs-header-navbar');
        var $widgetMenu = $('.cs-navbar-default.cs-nav-sticky');

        if ($templateMenu.length > 0)
            templateMenuOffset = $('.cs-header-navbar .csc-content-widget').offset().top;
        if ($widgetMenu.length > 0)
            widgetMenuOffset = $('.cs-navbar-default').offset().top;

        $(window).scroll(function (e) {

            var classList = "";

            if (templateMenuIsSticky.length > 0 & $templateMenu.length > 0) {
                setStickyMenu($templateMenu, "template", templateMenuOffset, "", $alignmentElement, alignmentClass);
            }

            if (templateMenuIsSticky.length == 0 & $widgetMenu.length > 0) {
                //get nearest background class
                var bgClass = "";

                var bgElement = $widgetMenu.closest('*[class*="bg"]')
                    .filter(function () {
                        return this.className.match(/(?:^|\s)bg-/);
                    });

                if (bgElement.length > 0)
                    classList = bgElement.attr('class').split(/\s+/);

                if (classList.length == 0)
                    bgClass = "bg-default";
                else
                    $.each(classList, function (index, item) {
                        if (item.startsWith("bg-")) {
                            bgClass = item;
                        }
                    });

                classList = "";

                //check for alignment of parent elements
                if ($alignmentElement.length == 0) {
                    $alignmentElement = $widgetMenu.closest('*[class*="csc-force"]')
                        .filter(function () {
                            return this.className.match(/(?:^|\s)csc-force/);
                        });

                    if ($alignmentElement.length > 0)
                        classList = $alignmentElement.attr('class').split(/\s+/);

                    if (classList.length > 0) {
                        $.each(classList, function (index, item) {
                            if (item.startsWith("csc-force")) {
                                alignmentClass = item;
                            }
                        });
                    }
                }

                setStickyMenu($widgetMenu, "widget", widgetMenuOffset, bgClass, $alignmentElement, alignmentClass);
            }
        });

    }
    
    function setStickyMenu($menu, type, offset, addedBgClass, $alignmentElement, alignmentClass) {
        var navBarSectionHeight = "";
        var stickyTopVal = 0;
        if (type == "template")
            navBarSectionHeight = $('.cs-header-navbar').height();
        if (type == "widget")
            navBarSectionHeight = $menu.parent().height();

        var isPositionFixed = ($menu.css('position') == 'fixed');

        if (checkLoggedIn()) {
            var $loginBar = $(".cs-body .cs-toolbar");
            
            if ($loginBar.length > 0) {
                var loginBarHeight = $loginBar.height();
                stickyTopVal = loginBarHeight;
            }
        }

        if ($(this).scrollTop() > offset && !isPositionFixed) {
            if (type == "template") {
                $menu.css({ 'position': 'fixed', 'top': stickyTopVal + 'px', 'width': '100%', 'z-index': '999' });
                $menu.addClass("cs-sticky-menu-active");
                //$('.cs-header-navbar').height(navBarSectionHeight);
            }
            if (type == "widget") {
                $menu.css({ 'position': 'fixed', 'top': stickyTopVal + 'px', 'right': '0px', 'left': '0px', 'z-index': '999' });
                $menu.addClass("cs-sticky-menu");
                $menu.addClass(addedBgClass);
                if ($alignmentElement.length > 0)
                    $alignmentElement.removeClass(alignmentClass)
                //$menu.parent().height(navBarSectionHeight);
            }
        }
        if ($(this).scrollTop() < offset && isPositionFixed) {
            $menu.css({ 'position': '', 'top': '', 'width': '', 'right': '', 'left': '', 'z-index': '' });
            $menu.removeClass("cs-sticky-menu-active");
            $menu.removeClass(addedBgClass);
            if ($alignmentElement.length > 0)
                $alignmentElement.addClass(alignmentClass)
        }
    }

    function checkLoggedIn() {
        var isAuthenticated = $('.cs-authenticated');

        if (isAuthenticated.length > 0)
            return true;
        else
            return false;
    }

    

    var _resizeThrottleTimerId;

    $(window).on("resize", function (e) {
        if (_resizeThrottleTimerId) window.clearTimeout(_resizeThrottleTimerId);

        _resizeThrottleTimerId = window.setTimeout(setContentNodeSizeClass, 100);
    });


    $(document).on("keyup", function (event) {
        if (event.key == "Escape") {
            //modal windows
            var $modal = $(this).find(".csc-modal, .cs-modal, .csc-popup, .modal-dialog").last();

            if ($modal) {
                var $lightbox = $modal.find("[name=lightbox-popup]");

                if ($lightbox.length > 0) {
                    var $close = $modal.find(".cs-lightbox-close");
                    $close.click();
                } else {
                    var $close = $modal.find("[name=close], .csc-modal-close, .close");
                    $close.click();
                    //$modal.dialog().close();
                }
            }

            //nav menus
            var $navMenuDropdown = $(".cs-navbar-item.open");

            if ($navMenuDropdown) {
                $navMenuDropdown.each(function () {
                    $(this).removeClass("open");
                });
            }
        }
    });
});

function modalFocusTrap(elem) {
    const focusableElements =
        'button, [href], input:visible, select, textarea';
    const $modal = elem; //document.querySelector(".csc-modal, .csc-popup, .modal-dialog"); // select the modal by it's id
    const $close = $modal.find(".csc-modal-close, [name=close]");

    var $firstFocusableElement = $modal.find(focusableElements).first();
    const $focusableContent = $modal.find(focusableElements);
    const $lastFocusableElement = $focusableContent.last();

    //$modal.focusFirst();
    
    if ($close.length > 0) {
        $close.focus();
    }
    

    document.addEventListener('keydown', function (e) {
        let isTabPressed = e.key === 'Tab' || e.keyCode === 9;

        if (!isTabPressed) {
            return;
        }

        if (e.shiftKey) {
            if ($(document.activeElement).is($firstFocusableElement)) {
                $lastFocusableElement.focus();
                e.preventDefault();
            }
        } else {
            if ($(document.activeElement).is($lastFocusableElement)) {
                $firstFocusableElement.focus();
                e.preventDefault();
            }
        }
    });

    $firstFocusableElement.focus();
}


function isInViewport(elem, offsetTop = 0, offsetRight = 0, offsetBottom = 0, offsetLeft = 0) {
        var bounding = elem.getBoundingClientRect();
        return (
            bounding.top >= (0 + offsetTop) &&
            bounding.left >= (0 + offsetLeft) &&
            bounding.bottom <= (window.innerHeight - offsetBottom || document.documentElement.clientHeight - offsetBottom) &&
            bounding.right <= (window.innerWidth - offsetRight || document.documentElement.clientWidth - offsetRight)
        );
};

function setContentNodeSizeClass(widget = "") {
    var $contentNodes = "";
    if (widget != "")
        $contentNodes = widget;
    else
        $contentNodes = $(".csc-content-node .csc-content-widget");

    $contentNodes.each(function () {
        var $node = $(this);
        var width = $node.outerWidth();
        var layout = $node.children(".content-layout");

        if (layout.length == 0) {

            $node.removeClass("cs-content-node-xs cs-content-node-sm cs-content-node-md cs-content-node-lg");

            if (width < 480) $node.addClass("cs-content-node-xs");
            else if (width <= 767) $node.addClass("cs-content-node-sm");
            else if (width <= 1169) $node.addClass("cs-content-node-md");
            else $node.addClass("cs-content-node-lg");
        }
    });
}

var getUrlParameter = function getUrlParameter(sParam) {
    var sPageURL = window.location.search.substring(1),
        sURLVariables = sPageURL.split('&'),
        sParameterName,
        i;

    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');

        if (sParameterName[0] === sParam) {
            return typeof sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
        }
    }
    return false;
};